[{"/home/rashad/mudring/mudring-react/src/index.js":"1","/home/rashad/mudring/mudring-react/src/reportWebVitals.js":"2","/home/rashad/mudring/mudring-react/src/App.js":"3","/home/rashad/mudring/mudring-react/src/components/Home.js":"4","/home/rashad/mudring/mudring-react/src/components/Navbar.js":"5","/home/rashad/mudring/mudring-react/src/components/Video.js":"6"},{"size":500,"mtime":1610832472951,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":1610832472951,"results":"9","hashOfConfig":"8"},{"size":655,"mtime":1610854370659,"results":"10","hashOfConfig":"8"},{"size":266,"mtime":1610841750622,"results":"11","hashOfConfig":"8"},{"size":1235,"mtime":1610864402468,"results":"12","hashOfConfig":"8"},{"size":3417,"mtime":1610862080418,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"r1d8u9",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"16"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"16"},"/home/rashad/mudring/mudring-react/src/index.js",[],["30","31"],"/home/rashad/mudring/mudring-react/src/reportWebVitals.js",[],"/home/rashad/mudring/mudring-react/src/App.js",["32"],"import Home from './components/Home'\nimport {BrowserRouter , Switch, Route , Redirect } from 'react-router-dom'; \nimport Bootstrap from '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nfunction App() {\n    return (\n        <div className=\"App\">\n            <BrowserRouter>\n                <Switch>\n                    <Route path=\"/\" exact >\n                        <Redirect to=\"/home\" />\n                    </Route>\n                    <Route path=\"/home\" exact >\n                        <Home />\n                    </Route>\n                   \n                </Switch>\n\n            </BrowserRouter>\n        </div>\n    );\n} export default App ","/home/rashad/mudring/mudring-react/src/components/Home.js",["33","34"],"import { useEffect , useState } from 'react';\nimport Navbar from './Navbar'; \nimport Video from './Video';\nfunction Home() {\n   \n\n\n\n\n    return (\n        <div className =\"home\">\n            <Navbar/>\n            <Video/>\n        </div>\n    );\n} export default Home; ","/home/rashad/mudring/mudring-react/src/components/Navbar.js",["35"],"/home/rashad/mudring/mudring-react/src/components/Video.js",["36","37","38"],"import React, { useState, useEffect, useRef } from 'react';\nimport * as faceapi from 'face-api.js'\nimport './CSS/Video.css';\nimport { detectFaceLandmarks } from 'face-api.js';\n\nfunction Video() {\n  const videoHeight = 768;\n  const videoWidth = 1024;\n  const [initializing, setInitializing] = useState(false)\n  const videoRef = useRef();\n  const canvasRef = useRef();\n  const [output, setOutput] = useState({ expressions: \"loading\" });\n  const [run, setRun] = useState();\n  const [emotion, setEmotion] = useState();\n\n\n  useEffect(() => {\n    const loadModels = async () => {\n      const MODEL_URL = process.env.PUBLIC_URL + '/models'\n      setInitializing(true);\n      Promise.all([\n        faceapi.nets.tinyFaceDetector.loadFromUri(MODEL_URL),\n        faceapi.nets.faceLandmark68Net.loadFromUri(MODEL_URL),\n        faceapi.nets.faceRecognitionNet.loadFromUri(MODEL_URL),\n        faceapi.nets.faceExpressionNet.loadFromUri(MODEL_URL),\n      ]).then(startVideo)\n    }\n    loadModels();\n  }, [])\n\n  const startVideo = () => {\n    navigator.getUserMedia({\n      video: {}\n    }, stream => videoRef.current.srcObject = stream,\n      function () { console.warn(\"Error getting audio stream from getUserMedia\") })\n  }\n\n  const handleVideoOnPlay = () => {\n    setInterval(async () => {\n      if (initializing) {\n        setInitializing(false);\n      }\n      canvasRef.current.innerHTML = faceapi.createCanvasFromMedia(videoRef.current);\n      const displaySize = {\n        width: videoWidth,\n        height: videoHeight\n      }\n      faceapi.matchDimensions(canvasRef.current, displaySize);\n      const detections = await faceapi.detectAllFaces(videoRef.current, new faceapi.TinyFaceDetectorOptions()).withFaceLandmarks().withFaceExpressions();\n      const resizedDetections = faceapi.resizeResults(detections, displaySize);\n      canvasRef.current.getContext('2d').clearRect(0, 0, videoWidth, videoHeight);\n      faceapi.draw.drawDetections(canvasRef.current, resizedDetections);\n      faceapi.draw.drawFaceLandmarks(canvasRef.current, resizedDetections);\n      faceapi.draw.drawFaceExpressions(canvasRef.current, resizedDetections);\n      setRun(false);\n\n      try {\n        setOutput(detections[0].expressions);\n        getEmotion(detections[0].expressions);\n      } catch (err) {\n        console.log(err);\n      }\n\n    }, 1000)\n  }\n\n\n  const getEmotion = async (expressions) => {\n    var big = {\n      name: \"\",\n      value: null\n    };\n\n    for (var key in expressions) {\n      if (expressions.hasOwnProperty(key)) {\n        if (big.value < expressions[key]) {\n          big = {\n            name: key,\n            value: expressions[key]\n          }\n        }\n      }\n    }\n    console.log(`name : ${big.name} value: ${big.value}`);\n\n    if (big.value > 0) {\n\n      setEmotion(big.name.toUpperCase());\n      console.log(emotion)\n    } else {\n      setEmotion(\"please wait\");\n    }\n\n\n  }\n\n  return (\n    <div className=\"App\">\n      \n      <div className=\"display-flex justify-content-center\">\n        <video ref={videoRef} autoPlay muted height={videoHeight} width={videoWidth} onPlay={handleVideoOnPlay} />\n        <canvas ref={canvasRef} className=\"position-absolute\" />\n      </div>\n      <div className=\"row\">\n\n        <span className=\"badge badge-dark\" style={{ paddingLeft: '30px', paddingRight: '30px' }}><h1>{initializing ? \"LOADING\" : emotion}</h1></span>\n\n      </div>\n\n\n\n    </div>\n  );\n}\n\nexport default Video;",{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":3,"column":8,"nodeType":"45","messageId":"46","endLine":3,"endColumn":17},{"ruleId":"43","severity":1,"message":"47","line":1,"column":10,"nodeType":"45","messageId":"46","endLine":1,"endColumn":19},{"ruleId":"43","severity":1,"message":"48","line":1,"column":22,"nodeType":"45","messageId":"46","endLine":1,"endColumn":30},{"ruleId":"49","severity":1,"message":"50","line":7,"column":21,"nodeType":"51","endLine":7,"endColumn":54},{"ruleId":"43","severity":1,"message":"52","line":4,"column":10,"nodeType":"45","messageId":"46","endLine":4,"endColumn":29},{"ruleId":"43","severity":1,"message":"53","line":12,"column":10,"nodeType":"45","messageId":"46","endLine":12,"endColumn":16},{"ruleId":"43","severity":1,"message":"54","line":13,"column":10,"nodeType":"45","messageId":"46","endLine":13,"endColumn":13},"no-native-reassign",["55"],"no-negated-in-lhs",["56"],"no-unused-vars","'Bootstrap' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'useState' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'detectFaceLandmarks' is defined but never used.","'output' is assigned a value but never used.","'run' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]